import React, { useEffect, useState } from "react";
import PostEditor from "./PostEditor";
import CommentSection from "./CommentSection";
import "./GroupBoardSection.css";
import axios from "axios";

const GroupBoardSection = ({ posts, comments, onWrite  }) => {
  const [postData, setPostData] = useState({});
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState("");
  const [selectedPost, setSelectedPost] = useState(null);
  const [mode, setMode] = useState("list"); // list | write | edit
  const [commentState, setCommentState] = useState({}); // {postId: [{id, author, text, date}]}
  const [editingPost, setEditingPost] = useState(null); // ÏàòÏ†ï Ï§ëÏù∏ Í≤åÏãúÎ¨º Î∞±ÏóÖ
  const [pendingMembers, setPendingMembers] = useState([]); 
  const [selectedMember, setSelectedMember] = useState(null);
  const [applicationContent, setApplicationContent] = useState("")

  //  ÏãúÏä§ÌÖú Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÎ¶¨
  const systemCategories = ["ÌöåÏõê ÏäπÏù∏"];
  const visibleCategories = ["Í≥µÏßÄÏÇ¨Ìï≠", "ÏûêÏú†Î∞©", "Ïù∏Ï¶ùÎ∞©", "ÏßàÎ¨∏Î∞©"];





  // ÏûÑÏãúÎç∞Ïù¥ÌÑ∞
  useEffect(() => {
    if (mode === "approve") {
      setPendingMembers([
        { id: 101, name: "ÎßêÌïòÎäî Í∞êÏûê", date: "2025-07-20" },
        { id: 102, name: "Î∞±ÏóîÎìúÏôï", date: "2025-07-21" },
        { id: 103, name: "Ìè¨Ìï≠ AIÌåÄ", date: "2025-07-22" },
      ]);
    }
  }, [mode]);

  useEffect(() => {
    if (selectedMember) {
      // ÏÑ†ÌÉùÌïú ÌöåÏõêÏóê Îî∞Îùº ÏûÑÏãú Ïã†Ï≤≠ Í∏Ä ÏßÄÏ†ï
      const dummyApplications = {
        101: "ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïó¥Ïã¨Ìûà ÌôúÎèôÌïòÍ≤†ÏäµÎãàÎã§.",
        102: "Ï±Ö Î™®ÏûÑÏóê Ï∞∏Ïó¨ÌïòÍ≥† Ïã∂ÏäµÎãàÎã§!",
        103: "Íº≠ ÏäπÏù∏ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§ :)",
      };
      setApplicationContent(dummyApplications[selectedMember.id] || "Ïã†Ï≤≠ Í∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.");
    }
  }, [selectedMember]);







  useEffect(() => {
    setCommentState(comments);
  }, [comments]);

  useEffect(() => {
    if (!posts) return;

    const buildPostData = (raw) => {
      const result = {};
      for (const category in raw) {
        result[category] = raw[category].map(item => ({ ...item, category }));
      }
      return result;
    };

    const newPostData = buildPostData(posts);
    setPostData(newPostData);

    const orderedCategories = [...visibleCategories, ...systemCategories];
    setCategories(orderedCategories);

    setSelectedCategory(
      orderedCategories.includes("Í≥µÏßÄÏÇ¨Ìï≠") ? "Í≥µÏßÄÏÇ¨Ìï≠" : orderedCategories[0] || ""
    );
  }, [posts]);


  // Î∞± Ïó∞ÎèôÏãú Ï£ºÏÑù Ìï¥Ï†ú
  // useEffect(() => {
  //   if (mode === "approve") {
  //     axios.get("/api/applications/pending").then((res) => {
  //       setPendingMembers(res.data);
  //     });
  //   }
  // }, [mode]);
  
  // useEffect(() => {
  //   if (selectedMember) {
  //     axios
  //       .get(`/api/applications/${selectedMember.id}`)
  //       .then((res) => setApplicationContent(res.data.content));
  //   }
  // }, [selectedMember]);

  // ÏûÑÏãúÎç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
  useEffect(() => {
  if (selectedMember) {
    // ‚úÖ ÏûÑÏãú Ïã†Ï≤≠ Í∏Ä Îç∞Ïù¥ÌÑ∞
    const dummyApplications = {
      101: "ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïó¥Ïã¨Ìûà ÌôúÎèôÌïòÍ≤†ÏäµÎãàÎã§.",
      102: "Ï±Ö Î™®ÏûÑÏóê Íº≠ Ï∞∏Ïó¨ÌïòÍ≥† Ïã∂Ïñ¥Ïöî!",
      103: "Ìï®Íªò Ï±Ö Ïù¥ÏïºÍ∏∞ ÎÇòÎàÑÍ≥† Ïã∂ÏäµÎãàÎã§!",
    };

    setApplicationContent(dummyApplications[selectedMember.id] || "Ïã†Ï≤≠ Í∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.");
  }
}, [selectedMember]);

  // Î∞± Ïó∞ÎèôÏãú Ï£ºÏÑù Ìï¥Ï†ú
  // const handleMemberApproval = (memberId, isAccepted) => {
  //   const url = isAccepted
  //     ? `/api/applications/${memberId}/approve`
  //     : `/api/applications/${memberId}/reject`;

  //   axios.post(url).then(() => {
  //     setPendingMembers((prev) => prev.filter((m) => m.id !== memberId));
  //     setSelectedMember(null);
  //     setApplicationContent("");
  //   });
  // };

  // ÏûÑÏãúÎç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
  const handleMemberApproval = (memberId, isAccepted) => {
    // ‚úÖ ÏΩòÏÜîÏóê Î°úÍ∑∏Îßå Ï∞çÍ≥† Î¶¨Ïä§Ìä∏ÏóêÏÑú Ï†úÍ±∞
    console.log(`${memberId}Î≤à ÌöåÏõê ${isAccepted ? "ÏàòÎùΩ" : "Í±∞Ï†à"}Îê®`);

    setPendingMembers((prev) => prev.filter((m) => m.id !== memberId));
    setSelectedMember(null);
    setApplicationContent("");
  };







  // Í≤åÏãúÎ¨º crud
  const createPost = (p) => {
    const newPost = {
      ...p,
      id : Date.now(),
      category : p.category,
      date : new Date().toISOString().slice(0, 10),
      writer : p.writer || "ÏûÑÏãúÎãâÎÑ§ÏûÑ",
    };
    setPostData(prev => ({
      ...prev,
      [newPost.category]: [newPost, ...(prev[newPost.category] || [])],
    }));
    setSelectedCategory(newPost.category);
    setMode("list");
  };

  const updatePost = async (p) => {
    try {
      const postId = p.groupPostId || p.id;

      await axios.put(`http://localhost:8080/group-board/post/${postId}`, {
        groupPostId: postId, 
        title: p.title,
        content: p.content,
        category: p.category,
        userId: 1, // ÏûÑÏãúÎç∞Ïù¥ÌÑ∞
      });

      setPostData(prev => {
        const updatedList = (prev[p.category] || []).map(item =>
          item.groupPostId === postId ? { ...item, ...p } : item
        );
        return { ...prev, [p.category]: updatedList };
      });

      setSelectedPost(null);
      setMode("list");
    } catch (err) {
      console.error("Í≤åÏãúÎ¨º ÏàòÏ†ï Ïã§Ìå®", err);
      alert("ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };

  const handleDelete = async () => {
    if (!selectedPost) return;

    if (window.confirm("üóëÔ∏è Í≤åÏãúÎ¨ºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")) {
      try {
        const postId = selectedPost.groupPostId || selectedPost.id;

        await axios.delete(`http://localhost:8080/group-board/post/${postId}`, {
          params: { requesterId: 1 } // ÏûÑÏãú ÏÇ¨Ïö©Ïûê ID
        });

        // Ìï¥Îãπ Í≤åÏãúÎ¨º Ï†úÍ±∞
        setPostData(prev => {
          const updatedList = (prev[selectedPost.category] || []).filter(
            item => item.groupPostId !== postId
          );
          return { ...prev, [selectedPost.category]: updatedList };
        });

        setSelectedPost(null);
        setMode("list");
      } catch (err) {
        console.error("ÏÇ≠Ï†ú Ïã§Ìå®", err);
        alert("ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    }
  };


  // ÎåìÍ∏Ä crud
  const addCmt = (pid, c) => {
    // ÏÑúÎ≤ÑÏóê ÎåìÍ∏Ä Ï∂îÍ∞Ä ÏöîÏ≤≠
    axios
      .post("http://localhost:8080/group-board/comments/add", {
        userId: 1, // ÏòàÏãú: ÏÇ¨Ïö©Ïûê ID
        groupPostId: pid,
        content: c.content,
      })
      .then(response => {
        // ÏÑúÎ≤ÑÏóêÏÑú Î∞òÌôòÎêú ÏÉà ÎåìÍ∏ÄÏùÑ ÏÉÅÌÉúÏóê Ï∂îÍ∞Ä
        setCommentState(prev => ({
          ...prev,
          [pid]: [...(prev[pid] || []), response.data],
        }));
      })
      .catch(error => {
        console.error("ÎåìÍ∏Ä Ï∂îÍ∞Ä Ïã§Ìå®", error);
      });
  };

  const delCmt = (pid, cid) => {
    axios
      .delete(`http://localhost:8080/group-board/comments/delete/${cid}`)
      .then(() => {
        setCommentState(prev => ({
          ...prev,
          [pid]: prev[pid].filter(c => c.commentId !== cid),
        }));
      })
      .catch(error => {
        console.error("ÎåìÍ∏Ä ÏÇ≠Ï†ú Ïã§Ìå®", error);
      });
  };


  const updCmt = (pid, upd) => {
    // ÏÑúÎ≤ÑÏóê ÎåìÍ∏Ä ÏàòÏ†ï ÏöîÏ≤≠
    axios
      .put(`http://localhost:8080/group-board/comments/update/${upd.commentId}`, {
        content: upd.content,
      })
      .then(response => {
        const updated = response.data;
        setCommentState(prev => ({
          ...prev,
          [pid]: prev[pid].map(c =>
            c.commentId === updated.commentId ? updated : c
          ),
        }));
      })
      .catch(error => {
        console.error("ÎåìÍ∏Ä ÏàòÏ†ï Ïã§Ìå®", error);
      });
  };

  const renderPosts = () => (
    <ul className="post-list">
      {[...(postData[selectedCategory] || [])]
        .sort((a, b) => new Date(b.regDate || b.date) - new Date(a.regDate || a.date))
        .map((post) => (
          <li
            key={`post-${post.groupPostId || post.id}`}
            className="post-row"
            onClick={() => setSelectedPost(post)}
          >
            <div className="post-title">{post.title}</div>
            <div className="post-meta">
              <span>{post.writer}</span> | <span>{post.date}</span>
            </div>
          </li>
        ))}
    </ul>
  );


  return (
    <div className="groupBoardSection">
      {/* ÏôºÏ™Ω Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù */}
      <div className="board-left">
        <button className="write-btn" onClick={onWrite}>
          Í∏Ä ÏûëÏÑ±
        </button>
        <ul>
          {categories.map(cat => (
            <li
              key={cat}
              onClick={() => {
                setSelectedCategory(cat);
                setSelectedPost(null);
                setMode(cat === "ÌöåÏõê ÏäπÏù∏" ? "approve" : "list");
              }}
              style={{
                cursor : "pointer",
                color  : selectedCategory === cat ? "#00F438" : "#ccc",
              }}
            >
              {cat}
            </li>
          ))}
        </ul>
      </div>


      {/* Ïò§Î•∏Ï™Ω Î≥∏Î¨∏ */}
      <div className="board-right">

        {mode === "approve" && (
          <div className="approval-section">
            <ul className="approval-list">
              {pendingMembers.map((member) => (
                <li key={member.id} className="approval-item">
                  <div className="left">
                    <span onClick={() => setSelectedMember(member)} className="member-name">
                      {member.name} |
                    </span>
                    <span className="member-date"> {member.date}</span>
                  </div>
                  <div className="right">
                    <button onClick={() => handleMemberApproval(member.id, true)}>ÏàòÎùΩ</button>
                    <button onClick={() => handleMemberApproval(member.id, false)}>Í±∞Ï†à</button>
                  </div>
                </li>
              ))}
            </ul>

            {selectedMember && (
              <div className="application-popup">
                <div className="popup-content">
                  <button className="close-btn" onClick={() => setSelectedMember(null)}>X</button>
                  <h4>{selectedMember.name}ÎãòÏùò Ïã†Ï≤≠ Í∏Ä</h4>
                  <p>{applicationContent}</p>
                  <div className="approval-buttons">
                    <button onClick={() => handleMemberApproval(selectedMember.id, true)}>ÏàòÎùΩ</button>
                    <button onClick={() => handleMemberApproval(selectedMember.id, false)}>Í±∞Ï†à</button>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {mode === "list" && !selectedPost && renderPosts()}

        {(mode === "write" || mode === "edit") && (
          <PostEditor
            categories={visibleCategories}
            initData={{
              ...selectedPost,
              id: selectedPost?.id || selectedPost?.groupPostId }}
            onSubmit={mode === "write" ? createPost : updatePost}
            onCancel={() => {
              if (editingPost) {
                setSelectedPost(editingPost);
                setMode("list");
                setEditingPost(null);
              } else {
                setMode("list"); 
              }
            }}
          />
        )}

        
        {selectedPost && mode === "list" && (
          <div className="post-detail">
            <h5>{selectedPost.title}</h5>
            <div className="etc">
              <span className="writer">{selectedPost.writer}</span>
              <span className="date">{selectedPost.date}</span>
            </div>
            <p className="content">{selectedPost.content}</p>
            <button className="back-button" onClick={() => setSelectedPost(null)}>
              Î™©Î°ùÏúºÎ°ú
            </button>
            <button className="edit-btn" onClick={() => {
              setEditingPost(selectedPost);
              setSelectedCategory(selectedPost.category);
              setMode("edit");
            }}>
              ÏàòÏ†ï
            </button>
            <button className="delete-btn" onClick={handleDelete}>ÏÇ≠Ï†ú</button>

            <CommentSection
              postId={selectedPost.id}
              comments={commentState[selectedPost.id] || []}
              onAdd={(c) => addCmt(selectedPost.id, c)}
              onDelete={(cid) => delCmt(selectedPost.id, cid)}
              onUpdate={(c) => updCmt(selectedPost.id, c)}
              currentUser={{ name: "ÏûÑÏãú" }}
            />
          </div>
        )}
      </div>
    </div>


  );
};


export default GroupBoardSection;
